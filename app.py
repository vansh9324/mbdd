import streamlit as st
import pandas as pd
from datetime import datetime

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# 0. CSV export links (public тАЬAnyone with linkтАЭ)
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
RESP_URL = (
    "https://docs.google.com/spreadsheets/d/"
    "1uFynRj2NtaVZveKygfEuliuLYwsKe2zCjycjS5F-YPQ"
    "/export?format=csv&gid=341334397"
)
KSH_URL = (
    "https://docs.google.com/spreadsheets/d/"
    "1uFynRj2NtaVZveKygfEuliuLYwsKe2zCjycjS5F-YPQ"
    "/export?format=csv&gid=554598115"
)

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# 1. Load & merge data (cached 10 s)
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
@st.cache_data(ttl=10, show_spinner="рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИтАж")
def load_data():
    resp = pd.read_csv(RESP_URL).rename(columns=str.strip)
    ksh  = pd.read_csv(KSH_URL).rename(columns=str.strip)
    return resp.merge(
        ksh,
        left_on="Kshetra",
        right_on="Kshetra Group",
        how="left"
    )

try:
    df = load_data()
except Exception as e:
    st.error(f"тЭМ рдбреЗрдЯрд╛ рд▓реЛрдб рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
    st.stop()

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# 2. Compute metrics
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
COL_MAIN     = "Main Group"
COL_KSHTRA   = "Kshetra"
COL_KARYA    = "Karyakarta Name_2"

# State totals
state_totals = (
    df.groupby(COL_MAIN)
      .size()
      .reset_index(name="рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди")
      .sort_values("рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди", ascending=False)
)

# Kshetra totals
kshetra_totals = (
    df.groupby([COL_MAIN, COL_KSHTRA])
      .size()
      .reset_index(name="рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди")
)

# Karyakarta totals
karya_totals = (
    df.groupby([COL_MAIN, COL_KSHTRA, COL_KARYA])
      .size()
      .reset_index(name="рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди")
)

# Build summary per-state
summary_rows = []
for _, st_row in state_totals.iterrows():
    state = st_row[COL_MAIN]
    total = int(st_row["рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди"])
    # top Kshetra
    top_ksh = (
        kshetra_totals[kshetra_totals[COL_MAIN] == state]
        .nlargest(1, "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди").iloc[0]
    )
    # top Karyakarta in that kshetra
    top_kr = (
        karya_totals[
            (karya_totals[COL_MAIN] == state) &
            (karya_totals[COL_KSHTRA] == top_ksh[COL_KSHTRA])
        ]
        .nlargest(1, "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди").iloc[0]
    )
    summary_rows.append({
        "рд░рд╛рдЬреНрдп": state,
        "рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди": total,
        "рд╢реАрд░реНрд╖ рдХреНрд╖реЗрддреНрд░": top_ksh[COL_KSHTRA],
        "рдХреНрд╖реЗрддреНрд░ рд░реЗрдЬрд╝рд┐рд╕реНрдЯреНрд░реА": int(top_ksh["рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди"]),
        "рд╢реАрд░реНрд╖ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛": top_kr[COL_KARYA],
        "рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд░реЗрдЬрд╝рд┐рд╕реНрдЯреНрд░реА": int(top_kr["рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди"]),
    })
summary_df = pd.DataFrame(summary_rows)

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# 3. Streamlit UI
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
st.set_page_config(
    page_title="ЁЯй╕ MBDD рд▓рд╛рдЗрд╡ рдкреНрд░рддрд┐рдпреЛрдЧрд┐рддрд╛",
    page_icon="ЁЯй╕",
    layout="wide"
)

# Header
st.markdown(
    "<h1 style='text-align:center;'>ЁЯй╕ MBDD тАУ рдореИрдЧрд╛ рд░рдХреНрдд рджрд╛рди рдбреНрд░рд╛рдЗрд╡ рдкреНрд░рддрд┐рдпреЛрдЧрд┐рддрд╛</h1>",
    unsafe_allow_html=True
)
col_time, col_refresh = st.columns([3,1])
with col_time:
    st.markdown(f"**рдЕрджреНрдпрддрди рд╕рдордп:** {datetime.now():%H:%M:%S}")
with col_refresh:
    if st.button("ЁЯФД рд░рд┐рдлреНрд░реЗрд╢"):
        st.cache_data.clear()
        df = load_data()
        state_totals = (
            df.groupby(COL_MAIN).size()
              .reset_index(name="рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди")
              .sort_values("рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди", ascending=False)
        )
        summary_df = pd.DataFrame(summary_rows)  # rebuild if needed

st.markdown("---")

# Top 3 States as Metrics
st.markdown("## ЁЯПЕ рд╢реАрд░реНрд╖ 3 рд░рд╛рдЬреНрдп")
top3 = state_totals.head(3).reset_index(drop=True)
cols = st.columns(3)
medals = ["ЁЯеЗ", "ЁЯеИ", "ЁЯеЙ"]
for i, row in top3.iterrows():
    cols[i].metric(
        label=f"{medals[i]} {row[COL_MAIN]}",
        value=int(row["рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди"])
    )

st.markdown("---")

# State Bar Chart
st.markdown("## ЁЯУК рд░рд╛рдЬреНрдпрд╡рд╛рд░ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдЪрд╛рд░реНрдЯ")
st.bar_chart(
    state_totals.set_index(COL_MAIN)["рдХреБрд▓ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди"],
    use_container_width=True
)

st.markdown("---")

# Detailed Summary Table
st.markdown("## ЁЯЧ║я╕П рд░рд╛рдЬреНрдп тЖТ рдХреНрд╖реЗрддреНрд░ тЖТ рд╢реАрд░реНрд╖ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд▓реАрдбрд░рдмреЛрд░реНрдб")
st.dataframe(summary_df, hide_index=True, use_container_width=True)

st.markdown("---")

# Top 5 Karyakartas Overall
st.markdown("## ЁЯСд рд╢реАрд░реНрд╖ 5 рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ (рд╕рднреА рд░рд╛рдЬреНрдпреЛрдВ рдореЗрдВ)")
top5_kr = (
    karya_totals.groupby(COL_KARYA)["рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди"]
                .sum()
                .reset_index()
                .nlargest(5, "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди")
)
st.table(top5_kr.rename(columns={COL_KARYA:"рдХрд╛рд░реНрдпрдХрд░реНрддрд╛", "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди":"рдХреБрд▓ рд░реЗрдЬрд╝рд┐рд╕реНрдЯреНрд░реА"}))

st.markdown("---")
st.markdown("**ЁЯФФ рд╕реНрд╡рд╕реНрде рдкреНрд░рддрд┐рд╕реНрдкрд░реНрдзрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВ!**")

